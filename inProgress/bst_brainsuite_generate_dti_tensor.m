function DTI = bst_brainsuite_generate_dti_tensor(T1Filename, dtiFilename, bvecFilename, bvalFilename, subjid, OutPutFolder)
% Call brainsuite to process the DWI data and generate the DTI tensor used

% OutPutFolder = brainsuiteDir;
% T1Filename = T1Nii;
% dtiFilename = DtiFile;
% bvecFilename = fullfile(bvecFileData.folder,bvecFileData.name);
% bvalFilename = fullfile(bvalFileData.folder,bvalFileData.name);


% 1-  Brain Surface Extractor or BSE tool 
bst_progress('text', 'Calling Brainsuite:  "1/3 : bse" ...');
% This version take account of the weired files names and paths
% T1Filename = '1001_T1.nii'
[status_bse,cmdout_bse]  = system(['bse -i ' T1Filename  ' --auto '  ...
                                                                                            ' -o ' fullfile(OutPutFolder,'skull_stripped_mri.nii.gz')...
                                                                                            ' --mask ' fullfile(OutPutFolder,'bse_smooth_brain.mask.nii.gz')...
                                                                                            ' --hires ' fullfile(OutPutFolder, 'bse_detailled_brain.mask.nii.gz')]);%...
%                                                                                             ' --cortex ' fullfile(OutPutFolder, 'bse_cortex_file.nii.gz')]);
if status_bse ~= 0
    brainsuite_bdp_logfile = fullfile(OutPutFolder,'brainsuite_bse_logfile.txt');
    fid = fopen(brainsuite_bdp_logfile , 'w');
    fprintf(fid, '%st', cmdout_bse);
    fprintf(fid, '%st', ' Load the file brainsuite_bse_logfile for manual debuging/data checking');
    fclose(fid);
    errMsg = ['Brainsuite Process failled at the "bse" step 02, please check the output logfile: %s ', brainsuite_bdp_logfile];
    return    
end
% [status_bse,cmdout_bse]  = system(['bse -i ' pathToT1 ' -o skull_stripped_mri.nii.gz --mask bse_mask.nii.gz  --hires bse_brainDetailled.nii.gz --cortex bse_cortex.nii.gz ' ]);

% 2- Non-uniformity correction:  using BrainSuite’s bias field correction
bst_progress('text', 'Calling Brainsuite: " 2/3 : bfc" ...');
% software (BFC tool) :  Important: BFC should only be applied to skull-stripped brain images.
% Use bse data
[status_bfc,cmdout_bfc]  = system(['bfc -i ' fullfile(OutPutFolder,'skull_stripped_mri.nii.gz')...
                                                                                                                ' -o ' fullfile(OutPutFolder,'output_mri.bfc.nii.gz')...
                                                                                                                ' -L 0.5 -U 1.5']);
if status_bfc ~= 0
    brainsuite_bdp_logfile = fullfile(OutPutFolder,'brainsuite_bfc_logfile.txt');
    fid = fopen(brainsuite_bdp_logfile , 'w');
    fprintf(fid, '%st', cmdout_bse);
    fprintf(fid, '%st', ' Load the file brainsuite_bfc_logfile for manual debuging/data checking');
    fclose(fid);
    errMsg = ['Brainsuite Process failled at the "bfc" step 03, please check the output logfile: %s '  brainsuite_bdp_logfile];
    return
end

% 3-BDP :
bst_progress('text', 'Calling Brainsuite: " 3/3 : bdp" ...');
% Check bval and bvec
bval = load(bvalFilename);
bvec = load(bvecFilename);
if length(bval) ~= length(bvec)
    error('bval and bvec have diffrent length, check these files before calling bdp');
end
[status_bdp,cmdout_bdp]  = system(['bdp ' fullfile(OutPutFolder,'output_mri.bfc.nii.gz') ' --tensor --nii ' dtiFilename...
                                                                                           '  --t1-mask '  fullfile(OutPutFolder,'bse_smooth_brain.mask.nii.gz')...
                                                                                           '  -g ' bvecFilename ' -b ' bvalFilename]);

if status_bdp ~= 0
    brainsuite_bdp_logfile = fullfile(OutPutFolder,'brainsuite_bdp_logfile.txt');
    fid = fopen(brainsuite_bdp_logfile , 'w');
    fprintf(fid, '%st', cmdout_bse);
    fprintf(fid, '%st', ' Load the file brainsuite_bdp_logfile for manual debuging/data checking');
    fclose(fid);
    errMsg = ['Brainsuite Process failled at the "bdp" step 04, please check the output logfile: %s ' brainsuite_bdp_logfile ];
    return
end
                                                                                       
% the main needed output is this : output_mri.dwi.RAS.correct.T1_coord.eig.nii.gz

%% Convert the eigen file to Vi and Li files
bst_progress('text', 'Calling Brainsuite "converting data format" ...');
% Check of the .eig.nii.gz files are generated by bdp
listing = dir(fullfile(OutPutFolder,'*.eig.nii.gz')) ;% filename can be specified with full path
if isempty(listing)
    brainsuite_bdp_logfile = fullfile(OutPutFolder,'brainsuite_bdp_logfile.txt');
    fid = fopen(brainsuite_bdp_logfile , 'w');
    fprintf(fid, '%st', cmdout_bdp);
    fprintf(fid, '%st', ' Load the file brainsuite_bdp_logfile for manual debuging/data checking');
    fclose(fid);    
    errMsg = ['It seems that there  are no files " *.eig.nii.gz " generated by the BDP .... please check the output logfile:  ' brainsuite_bdp_logfile]; return
end

eig_filename = listing.name;
output_base =  fullfile(OutPutFolder,[subjid '.tensor']); % file prefix string
%% add eig2nifti to matlab path 
eig2nifti( fullfile(OutPutFolder,eig_filename), output_base);
% ASK ANAND if we can have the source code of eig2nifti unstead of the
% binary or this p code.

%% Check the SimBio team files and code for the rest of this 
bst_progress('text', 'Calling Brainsuite "loading tensors"...');
% The files generated by brainsuite:  unzip all the tensors files
gunzip(fullfile(OutPutFolder, '*.tensor.*.gz'))
% Load all the files : keep the fieldtrip vesion as it's originally used
% dir(fullfile(OutPutFolder, '*.tensor.*.nii')); %subjid = 'A2016'
% ft_defaults
V1File = fullfile(OutPutFolder,[ subjid '.tensor.V1.nii']);
% V1Data = ft_read_mri(V1File); DTI{1}  = V1Data;
[V1_data, vox2ras] = in_mri_nii(V1File,1,[]); DTI{1}  = bstMri2ftMri(V1_data, vox2ras);
V2File = fullfile(OutPutFolder,[ subjid '.tensor.V2.nii']);
% V2Data = ft_read_mri(V2File); DTI{2}  = V2Data;
[V2_data, vox2ras] = in_mri_nii(V2File,1,[]); DTI{2}  = bstMri2ftMri(V2_data, vox2ras);
V3File = fullfile(OutPutFolder,[ subjid '.tensor.V3.nii']);
% V3Data = ft_read_mri(V3File); DTI{3}  = V3Data;
[V3_data, vox2ras] = in_mri_nii(V3File,1,[]);  DTI{3}  = bstMri2ftMri(V3_data, vox2ras);
L1File = fullfile(OutPutFolder,[ subjid '.tensor.L1.nii']);
% L1Data = ft_read_mri(L1File); DTI{4}   = L1Data;
[L1_data, vox2ras] = in_mri_nii(L1File,1,[]);  DTI{4}  = bstMri2ftMri(L1_data, vox2ras);
L2File = fullfile(OutPutFolder,[ subjid '.tensor.L2.nii']);
% L2Data = ft_read_mri(L2File); DTI{5}   = L2Data;
[L2_data, vox2ras] = in_mri_nii(L2File,1,[]);   DTI{5}  = bstMri2ftMri(L2_data, vox2ras);
L3File = fullfile(OutPutFolder,[ subjid '.tensor.L3.nii']);
% L3Data = ft_read_mri(L3File); DTI{6}   = L3Data;
[L3_data, vox2ras] = in_mri_nii(L3File,1,[]);   DTI{6}  = bstMri2ftMri(L3_data, vox2ras);

end